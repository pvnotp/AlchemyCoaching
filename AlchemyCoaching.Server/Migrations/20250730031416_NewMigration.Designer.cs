// <auto-generated />
using System;
using AlchemyCoaching.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlchemyCoaching.Server.Migrations
{
    [DbContext(typeof(AlchemyDbContext))]
    [Migration("20250730031416_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("AlchemyCoaching")
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientPortal.Server.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Coach")
                        .HasColumnType("int");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Appointment", "AlchemyCoaching");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "8a5bfbc4-50ff-46fc-a2eb-9cc63ded88e3",
                            Coach = 0,
                            Location = 0,
                            Note = "Deleniti soluta dolore quidem et. Ipsam voluptatem hic sed rerum qui qui enim nisi earum. Cumque corporis asperiores eum.",
                            Time = new DateTime(2025, 3, 27, 7, 40, 24, 249, DateTimeKind.Unspecified).AddTicks(7444)
                        },
                        new
                        {
                            Id = 2,
                            ClientId = "4b7f463b-2129-4ab2-adfb-c7f1ae861f5a",
                            Coach = 0,
                            Location = 0,
                            Note = "Quaerat nihil voluptate fugiat corporis reiciendis. Consectetur iusto occaecati nemo doloribus corrupti et placeat aut ipsum. Libero reprehenderit quos non laborum cupiditate ut. Delectus explicabo tempore. Dolorum ut perspiciatis rerum. Rerum sit nihil a.",
                            Time = new DateTime(2025, 12, 13, 20, 16, 25, 977, DateTimeKind.Unspecified).AddTicks(2477)
                        },
                        new
                        {
                            Id = 3,
                            ClientId = "4b7f463b-2129-4ab2-adfb-c7f1ae861f5a",
                            Coach = 0,
                            Location = 0,
                            Note = "Aspernatur autem error et praesentium.\nQuia consequatur non eaque.\nTotam suscipit reprehenderit omnis.\nQui voluptates suscipit voluptas velit rerum rerum nemo magni aliquam.\nConsequatur modi est animi eum ipsa.\nBeatae doloribus dolor dolores qui dolore sunt accusantium qui sunt.",
                            Time = new DateTime(2025, 12, 6, 21, 24, 59, 371, DateTimeKind.Unspecified).AddTicks(8935)
                        },
                        new
                        {
                            Id = 4,
                            ClientId = "35bc7f81-b492-487f-981d-767d4d1605f8",
                            Coach = 0,
                            Location = 0,
                            Note = "Illum quis soluta.",
                            Time = new DateTime(2025, 10, 18, 10, 25, 49, 401, DateTimeKind.Unspecified).AddTicks(5705)
                        },
                        new
                        {
                            Id = 5,
                            ClientId = "c6654d38-aa6d-48cb-9510-9c37b6cac539",
                            Coach = 0,
                            Location = 0,
                            Note = "nihil",
                            Time = new DateTime(2025, 8, 29, 10, 0, 43, 780, DateTimeKind.Unspecified).AddTicks(9941)
                        },
                        new
                        {
                            Id = 6,
                            ClientId = "a7f0f254-4b16-45bf-9b58-223b1758279f",
                            Coach = 0,
                            Location = 0,
                            Note = "voluptates",
                            Time = new DateTime(2025, 12, 24, 19, 38, 36, 676, DateTimeKind.Unspecified).AddTicks(6463)
                        },
                        new
                        {
                            Id = 7,
                            ClientId = "2557440c-ce23-4bb7-9e56-415c896895f9",
                            Coach = 0,
                            Location = 0,
                            Note = "In rerum blanditiis tempora dolor.\nNesciunt in reprehenderit fugiat.\nMolestiae ex quo tempore molestias iure qui nostrum.\nVoluptatem dolore aut.",
                            Time = new DateTime(2025, 6, 4, 1, 10, 59, 480, DateTimeKind.Unspecified).AddTicks(8457)
                        },
                        new
                        {
                            Id = 8,
                            ClientId = "a7f0f254-4b16-45bf-9b58-223b1758279f",
                            Coach = 0,
                            Location = 0,
                            Note = "dolor",
                            Time = new DateTime(2025, 8, 28, 15, 58, 52, 746, DateTimeKind.Unspecified).AddTicks(8031)
                        },
                        new
                        {
                            Id = 9,
                            ClientId = "9df337a9-1d0e-4986-aa74-d4aa690b3e1a",
                            Coach = 0,
                            Location = 0,
                            Note = "Alias ipsa ullam aut temporibus qui mollitia beatae. Corporis et consequatur accusamus delectus culpa. Aliquid possimus esse sit rerum deserunt dolores aut autem. Provident rerum numquam autem expedita minus iusto consequatur aut eum. Eum excepturi suscipit fugiat odio alias. Aut consequatur quas delectus sit sunt.",
                            Time = new DateTime(2025, 6, 26, 17, 52, 42, 911, DateTimeKind.Unspecified).AddTicks(9106)
                        },
                        new
                        {
                            Id = 10,
                            ClientId = "c6654d38-aa6d-48cb-9510-9c37b6cac539",
                            Coach = 0,
                            Location = 0,
                            Note = "Eaque id incidunt voluptatibus. Vero minima nihil omnis molestias mollitia molestiae sit maxime. Et sequi esse voluptates ut dignissimos enim similique ut harum. Repellat aut fugiat aut consequuntur qui.",
                            Time = new DateTime(2025, 11, 16, 11, 0, 32, 881, DateTimeKind.Unspecified).AddTicks(6237)
                        },
                        new
                        {
                            Id = 11,
                            ClientId = "d99dc1a4-6e16-492d-8151-90b6aa2d7d7f",
                            Coach = 0,
                            Location = 0,
                            Note = "rerum",
                            Time = new DateTime(2025, 6, 5, 3, 38, 45, 338, DateTimeKind.Unspecified).AddTicks(8363)
                        },
                        new
                        {
                            Id = 12,
                            ClientId = "2557440c-ce23-4bb7-9e56-415c896895f9",
                            Coach = 0,
                            Location = 0,
                            Note = "Qui qui odio nemo perferendis.\nIpsa hic facere totam.\nQuaerat debitis consequatur et temporibus dolores mollitia.\nNulla vero alias repellendus vero.\nCulpa in ex qui.",
                            Time = new DateTime(2025, 10, 13, 14, 11, 34, 695, DateTimeKind.Unspecified).AddTicks(8085)
                        },
                        new
                        {
                            Id = 13,
                            ClientId = "8a5bfbc4-50ff-46fc-a2eb-9cc63ded88e3",
                            Coach = 0,
                            Location = 0,
                            Note = "consectetur",
                            Time = new DateTime(2025, 7, 10, 15, 28, 18, 765, DateTimeKind.Unspecified).AddTicks(8210)
                        },
                        new
                        {
                            Id = 14,
                            ClientId = "2557440c-ce23-4bb7-9e56-415c896895f9",
                            Coach = 0,
                            Location = 0,
                            Note = "Esse id reprehenderit est reprehenderit.\nQui et eos exercitationem omnis porro accusamus.\nEaque et est beatae.\nMolestias cumque nesciunt voluptas veniam nihil quis est quod harum.\nSint natus neque id quis facilis fuga sequi reprehenderit.",
                            Time = new DateTime(2025, 8, 30, 20, 35, 10, 461, DateTimeKind.Unspecified).AddTicks(1473)
                        },
                        new
                        {
                            Id = 15,
                            ClientId = "8a5bfbc4-50ff-46fc-a2eb-9cc63ded88e3",
                            Coach = 0,
                            Location = 0,
                            Note = "Ut minus et a.",
                            Time = new DateTime(2025, 12, 11, 5, 19, 46, 563, DateTimeKind.Unspecified).AddTicks(3412)
                        },
                        new
                        {
                            Id = 16,
                            ClientId = "6507f074-b299-4abb-8b9c-c69d59a11504",
                            Coach = 0,
                            Location = 0,
                            Note = "Et molestiae rerum deleniti non amet sit.\nQui dolorem sed et quisquam hic aliquid.",
                            Time = new DateTime(2025, 9, 5, 1, 21, 32, 262, DateTimeKind.Unspecified).AddTicks(2074)
                        },
                        new
                        {
                            Id = 17,
                            ClientId = "6507f074-b299-4abb-8b9c-c69d59a11504",
                            Coach = 0,
                            Location = 0,
                            Note = "Qui quisquam magnam sint eos aut iste quia.",
                            Time = new DateTime(2025, 10, 26, 21, 55, 12, 505, DateTimeKind.Unspecified).AddTicks(4650)
                        },
                        new
                        {
                            Id = 18,
                            ClientId = "8a5bfbc4-50ff-46fc-a2eb-9cc63ded88e3",
                            Coach = 0,
                            Location = 0,
                            Note = "rerum",
                            Time = new DateTime(2025, 8, 30, 18, 45, 24, 618, DateTimeKind.Unspecified).AddTicks(4056)
                        },
                        new
                        {
                            Id = 19,
                            ClientId = "d99dc1a4-6e16-492d-8151-90b6aa2d7d7f",
                            Coach = 0,
                            Location = 0,
                            Note = "Quidem id totam magnam aut quia. Aut ipsa animi accusantium voluptas eos. Est et ut fugit sed.",
                            Time = new DateTime(2025, 4, 16, 2, 18, 52, 384, DateTimeKind.Unspecified).AddTicks(8799)
                        },
                        new
                        {
                            Id = 20,
                            ClientId = "4b7f463b-2129-4ab2-adfb-c7f1ae861f5a",
                            Coach = 0,
                            Location = 0,
                            Note = "Consectetur enim repellendus.",
                            Time = new DateTime(2025, 7, 10, 7, 0, 6, 500, DateTimeKind.Unspecified).AddTicks(907)
                        },
                        new
                        {
                            Id = 21,
                            ClientId = "35bc7f81-b492-487f-981d-767d4d1605f8",
                            Coach = 0,
                            Location = 0,
                            Note = "Facere velit error alias autem adipisci nobis et voluptatum dolorem.\nQuod in omnis corporis.\nNihil culpa voluptatem ut et laborum a.\nBlanditiis et minima illum esse.",
                            Time = new DateTime(2025, 4, 2, 14, 5, 40, 350, DateTimeKind.Unspecified).AddTicks(3848)
                        },
                        new
                        {
                            Id = 22,
                            ClientId = "a7f0f254-4b16-45bf-9b58-223b1758279f",
                            Coach = 0,
                            Location = 0,
                            Note = "Earum debitis ipsa sequi et occaecati eius.",
                            Time = new DateTime(2025, 5, 25, 10, 8, 10, 144, DateTimeKind.Unspecified).AddTicks(4994)
                        },
                        new
                        {
                            Id = 23,
                            ClientId = "6507f074-b299-4abb-8b9c-c69d59a11504",
                            Coach = 0,
                            Location = 0,
                            Note = "Consequatur sit aut harum eos.\nVoluptatem id molestias temporibus.\nQuasi harum saepe amet.\nVeniam unde minus aut.",
                            Time = new DateTime(2025, 9, 16, 23, 53, 14, 339, DateTimeKind.Unspecified).AddTicks(2406)
                        },
                        new
                        {
                            Id = 24,
                            ClientId = "a7f0f254-4b16-45bf-9b58-223b1758279f",
                            Coach = 0,
                            Location = 0,
                            Note = "Consequatur aut non dolore enim nesciunt. Voluptatem exercitationem quia sapiente sunt id rem consequatur. In dolorem mollitia soluta tempora modi odio sed. Eos veniam ab nisi ut.",
                            Time = new DateTime(2025, 2, 2, 16, 29, 22, 66, DateTimeKind.Unspecified).AddTicks(5581)
                        },
                        new
                        {
                            Id = 25,
                            ClientId = "d99dc1a4-6e16-492d-8151-90b6aa2d7d7f",
                            Coach = 0,
                            Location = 0,
                            Note = "Qui quam est aut.",
                            Time = new DateTime(2025, 5, 6, 3, 47, 4, 696, DateTimeKind.Unspecified).AddTicks(3799)
                        },
                        new
                        {
                            Id = 26,
                            ClientId = "6507f074-b299-4abb-8b9c-c69d59a11504",
                            Coach = 0,
                            Location = 0,
                            Note = "Ipsa distinctio officia illo voluptatem corporis aut.",
                            Time = new DateTime(2025, 1, 11, 22, 38, 12, 562, DateTimeKind.Unspecified).AddTicks(716)
                        },
                        new
                        {
                            Id = 27,
                            ClientId = "c6654d38-aa6d-48cb-9510-9c37b6cac539",
                            Coach = 0,
                            Location = 0,
                            Note = "Voluptatem et quam placeat laborum eveniet.\nDolor et quam perferendis pariatur sed voluptas vitae aut consectetur.\nEt sint aut vitae cumque ut eaque ea sit.\nEst necessitatibus laborum est.",
                            Time = new DateTime(2025, 5, 3, 11, 12, 24, 741, DateTimeKind.Unspecified).AddTicks(5374)
                        },
                        new
                        {
                            Id = 28,
                            ClientId = "4b7f463b-2129-4ab2-adfb-c7f1ae861f5a",
                            Coach = 0,
                            Location = 0,
                            Note = "Itaque nihil est at.\nQuo unde autem eaque aperiam et libero perspiciatis.",
                            Time = new DateTime(2025, 12, 8, 14, 37, 41, 732, DateTimeKind.Unspecified).AddTicks(7399)
                        },
                        new
                        {
                            Id = 29,
                            ClientId = "a7f0f254-4b16-45bf-9b58-223b1758279f",
                            Coach = 0,
                            Location = 0,
                            Note = "Eaque officia aut.\nVoluptatem voluptate aut eaque distinctio perspiciatis.",
                            Time = new DateTime(2025, 2, 7, 15, 17, 34, 270, DateTimeKind.Unspecified).AddTicks(3931)
                        },
                        new
                        {
                            Id = 30,
                            ClientId = "8a5bfbc4-50ff-46fc-a2eb-9cc63ded88e3",
                            Coach = 0,
                            Location = 0,
                            Note = "Eos impedit explicabo rem aut rerum suscipit.",
                            Time = new DateTime(2025, 6, 11, 11, 39, 20, 663, DateTimeKind.Unspecified).AddTicks(2395)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "AlchemyCoaching");

                    b.HasData(
                        new
                        {
                            Id = "1e38844f-a3d6-4c5c-9ce5-84799105b249",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "bd1efe44-7a72-4014-b3b1-9193bdd420bf",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "5fc772b7-f0b2-475f-987f-9fd5cfc43886",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "AlchemyCoaching");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "AlchemyCoaching");

                    b.HasData(
                        new
                        {
                            Id = "46c2621d-c662-47c6-8d58-ee683fb12e6a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87dcabf7-32e1-4100-a374-02f16eceda03",
                            Email = "Gilbert35@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "gilbert35@email.com",
                            NormalizedUserName = "gilbert24",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ5k6vr+J+Tg2uA+Ws+dAhpuLUYKAzyfKKL/R2p6bIvOY2RCTByxkON4tvoMFdwS/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb310fc4-5f9a-4768-b497-bb8a6f22e8a2",
                            TwoFactorEnabled = false,
                            UserName = "Gilbert24"
                        },
                        new
                        {
                            Id = "8a5bfbc4-50ff-46fc-a2eb-9cc63ded88e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22ff1534-10e4-4ec2-b708-9480734c9407",
                            Email = "Edwin_Funk@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "edwin_funk@email.com",
                            NormalizedUserName = "edwin_funk85",
                            PasswordHash = "AQAAAAIAAYagAAAAEN+P9vYRyHsQysQm4TccgYHDlAxOhq0CqFzk4ZXkTEdo4PKsDmYYvkIwPkXzTa72lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52cbab99-794a-420f-a1f6-9173bca478cd",
                            TwoFactorEnabled = false,
                            UserName = "Edwin_Funk85"
                        },
                        new
                        {
                            Id = "2557440c-ce23-4bb7-9e56-415c896895f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b8c2053-fa94-4e33-a2f9-2acea425a4bf",
                            Email = "Charlotte79@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "charlotte79@email.com",
                            NormalizedUserName = "charlotte_wolff86",
                            PasswordHash = "AQAAAAIAAYagAAAAEJuzEkoJCXBc906zQ9ONxSm69SltXaV1LmrBYyBCC5ufPTWv3KFr1X1d3oCwNfTLlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad48f279-7112-4f69-a92b-06d76cfc5299",
                            TwoFactorEnabled = false,
                            UserName = "Charlotte_Wolff86"
                        },
                        new
                        {
                            Id = "d99dc1a4-6e16-492d-8151-90b6aa2d7d7f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f14225c-408f-4f82-a7e2-3693fe543711",
                            Email = "Edmund87@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "edmund87@email.com",
                            NormalizedUserName = "edmund22",
                            PasswordHash = "AQAAAAIAAYagAAAAEGkSRZtnRpsBmVYCCDtEmsqvnzhuEkYEjJfGhziBzaNqZmId7JwqYDlEZ6PVEtmS5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e57d869-76fd-4d20-b29a-04404e8a4afc",
                            TwoFactorEnabled = false,
                            UserName = "Edmund22"
                        },
                        new
                        {
                            Id = "6507f074-b299-4abb-8b9c-c69d59a11504",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34a44e2c-eaa1-4c92-bbb2-20d72e9719c3",
                            Email = "Melody_Morar@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "melody_morar@email.com",
                            NormalizedUserName = "melody2",
                            PasswordHash = "AQAAAAIAAYagAAAAEBWBAR3OAJ3v3IH8yHXx7zufsx79GHsuOeDVWx0b1Te8/74HwXwhaEM3vaiDwJAwDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8e14515-805f-48c8-ba39-19f2851fdf81",
                            TwoFactorEnabled = false,
                            UserName = "Melody2"
                        },
                        new
                        {
                            Id = "a7f0f254-4b16-45bf-9b58-223b1758279f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "557cefee-436d-4028-bc77-781d1ab482e5",
                            Email = "Alexandra.Thiel41@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "alexandra.thiel41@email.com",
                            NormalizedUserName = "alexandra88",
                            PasswordHash = "AQAAAAIAAYagAAAAEGC936xdz8IIzuZ4fzj38/6JByCxtikzWf17VJtUGxGrB04Mp4is7jdX9sjR/Qb4kQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b07ee2eb-e29f-4f81-a0ac-dbe2ec61abc6",
                            TwoFactorEnabled = false,
                            UserName = "Alexandra88"
                        },
                        new
                        {
                            Id = "4b7f463b-2129-4ab2-adfb-c7f1ae861f5a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7fb8f0c5-0e0d-4b52-9620-961e8ce96d31",
                            Email = "Malcolm.Gerhold75@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "malcolm.gerhold75@email.com",
                            NormalizedUserName = "malcolm.gerhold47",
                            PasswordHash = "AQAAAAIAAYagAAAAEDUhQaRt/NqodAq2STg9cjZziJFvcT38gaGmHs52XZaF21BJprHzxUkmU45AZC6E0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4c20f60-ea78-47c3-97d5-713fb10ee9bb",
                            TwoFactorEnabled = false,
                            UserName = "Malcolm.Gerhold47"
                        },
                        new
                        {
                            Id = "c6654d38-aa6d-48cb-9510-9c37b6cac539",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e8c6f19-f65a-4063-a99d-77df7de96a33",
                            Email = "Charlotte63@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "charlotte63@email.com",
                            NormalizedUserName = "charlotte78",
                            PasswordHash = "AQAAAAIAAYagAAAAEMldfGyRHZalk9QHTvTRZiSx8LL2rU6sT0rjbGS9RltGxwldOBWcDA+wSmFreoiY8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ef0a72f-3162-48eb-93d9-f6c2ed340bcd",
                            TwoFactorEnabled = false,
                            UserName = "Charlotte78"
                        },
                        new
                        {
                            Id = "9df337a9-1d0e-4986-aa74-d4aa690b3e1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd0a8247-e368-4aac-9123-4c4d8aa54815",
                            Email = "Maggie.Runolfsson@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "maggie.runolfsson@email.com",
                            NormalizedUserName = "maggie17",
                            PasswordHash = "AQAAAAIAAYagAAAAEFWHXiny+gadWLK9sDRHwwygHWrRCwwag2bk8P01fKZb2Bq1Z0LaBUaV6XCGV1tN6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a3ab2da-d472-460a-96ba-2596214c2426",
                            TwoFactorEnabled = false,
                            UserName = "Maggie17"
                        },
                        new
                        {
                            Id = "35bc7f81-b492-487f-981d-767d4d1605f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90179e32-a78d-4481-95d7-beb6e3dcfd32",
                            Email = "Bradley.Howell86@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "bradley.howell86@email.com",
                            NormalizedUserName = "bradley.howell",
                            PasswordHash = "AQAAAAIAAYagAAAAEPllpA9l0a/ighXJ8iFdAOOpZFB3efF1MAHusWJBZecWRFxUiH6YDSpCLn2ZDqC67g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51797b54-78d8-41c7-a875-259ff05b8864",
                            TwoFactorEnabled = false,
                            UserName = "Bradley.Howell"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78f139ad-bac0-456c-bc25-8e68d12f2784",
                            Email = "alisonjoyforster@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "alisonjoyforster@gmail.com",
                            NormalizedUserName = "alison",
                            PasswordHash = "AQAAAAIAAYagAAAAEN1+YUvTQUfF4BY2XEDNILwoCLQrSqSTC40wuS0RlSYGfbKH8EhdUejAIxR9czTKdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94e15e72-2136-44b8-9b00-bde0f26188ee",
                            TwoFactorEnabled = false,
                            UserName = "Alison"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "AlchemyCoaching");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "AlchemyCoaching");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "AlchemyCoaching");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "AlchemyCoaching");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalSite.Server.Data;

#nullable disable

namespace AlchemyCoaching.Server.Migrations
{
    [DbContext(typeof(DemoDbContext))]
    [Migration("20250603160019_sqlite_migration")]
    partial class sqlite_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("PersonalSite")
                .HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("ClientPortal.Server.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Location")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Appointment", "PersonalSite");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "1e8b7700-2695-4834-adfc-ca918047bca4",
                            Location = 0,
                            Note = "Iure fugit veniam et.\nA molestiae fugit velit hic natus quaerat fugit facere.\nEst soluta ut quia dolores aperiam in quia.\nQui magni atque voluptate consectetur molestiae.",
                            Time = new DateTime(2025, 6, 29, 13, 45, 29, 842, DateTimeKind.Unspecified).AddTicks(413)
                        },
                        new
                        {
                            Id = 2,
                            ClientId = "37c95c63-3a36-4430-8546-c6cd95fb8d04",
                            Location = 0,
                            Note = "et",
                            Time = new DateTime(2025, 6, 30, 17, 55, 29, 911, DateTimeKind.Unspecified).AddTicks(5372)
                        },
                        new
                        {
                            Id = 3,
                            ClientId = "4648bd27-14a0-41a5-93ed-c082e35751db",
                            Location = 0,
                            Note = "Nisi tenetur est qui consectetur sequi expedita. Libero expedita harum quisquam ut aut aut velit vero. Dolores minima aut ducimus id odit.",
                            Time = new DateTime(2025, 2, 25, 11, 48, 24, 196, DateTimeKind.Unspecified).AddTicks(5120)
                        },
                        new
                        {
                            Id = 4,
                            ClientId = "1e8b7700-2695-4834-adfc-ca918047bca4",
                            Location = 0,
                            Note = "exercitationem",
                            Time = new DateTime(2025, 3, 16, 2, 40, 34, 236, DateTimeKind.Unspecified).AddTicks(3156)
                        },
                        new
                        {
                            Id = 5,
                            ClientId = "a98f4a90-23d2-477d-be11-b13842692679",
                            Location = 0,
                            Note = "perspiciatis",
                            Time = new DateTime(2025, 2, 24, 12, 28, 31, 381, DateTimeKind.Unspecified).AddTicks(9139)
                        },
                        new
                        {
                            Id = 6,
                            ClientId = "57650b32-15eb-45bc-86de-9aa3c9453309",
                            Location = 0,
                            Note = "sit",
                            Time = new DateTime(2025, 3, 9, 20, 19, 12, 933, DateTimeKind.Unspecified).AddTicks(7989)
                        },
                        new
                        {
                            Id = 7,
                            ClientId = "4648bd27-14a0-41a5-93ed-c082e35751db",
                            Location = 0,
                            Note = "et",
                            Time = new DateTime(2025, 5, 15, 2, 7, 11, 86, DateTimeKind.Unspecified).AddTicks(1284)
                        },
                        new
                        {
                            Id = 8,
                            ClientId = "36b7ee83-5861-4123-9f3a-bcde88cb7495",
                            Location = 0,
                            Note = "Tempora asperiores rerum aut.",
                            Time = new DateTime(2025, 1, 31, 6, 38, 51, 699, DateTimeKind.Unspecified).AddTicks(1013)
                        },
                        new
                        {
                            Id = 9,
                            ClientId = "345e82e9-ffb8-4c2a-8fae-99577ac8e2fd",
                            Location = 0,
                            Note = "Quam deleniti et quo nostrum. Assumenda at totam possimus qui nisi magni voluptatum. Error alias velit nemo quidem qui dicta natus ducimus rem.",
                            Time = new DateTime(2025, 3, 13, 2, 6, 34, 211, DateTimeKind.Unspecified).AddTicks(856)
                        },
                        new
                        {
                            Id = 10,
                            ClientId = "1e8b7700-2695-4834-adfc-ca918047bca4",
                            Location = 0,
                            Note = "quae",
                            Time = new DateTime(2025, 3, 6, 21, 15, 33, 83, DateTimeKind.Unspecified).AddTicks(2459)
                        },
                        new
                        {
                            Id = 11,
                            ClientId = "37c95c63-3a36-4430-8546-c6cd95fb8d04",
                            Location = 0,
                            Note = "dolores",
                            Time = new DateTime(2025, 2, 2, 8, 5, 36, 618, DateTimeKind.Unspecified).AddTicks(253)
                        },
                        new
                        {
                            Id = 12,
                            ClientId = "37c95c63-3a36-4430-8546-c6cd95fb8d04",
                            Location = 0,
                            Note = "Consequuntur suscipit blanditiis. Ut delectus nulla et dolor ea. Laudantium fuga totam amet quaerat.",
                            Time = new DateTime(2025, 2, 23, 17, 58, 59, 329, DateTimeKind.Unspecified).AddTicks(888)
                        },
                        new
                        {
                            Id = 13,
                            ClientId = "a98f4a90-23d2-477d-be11-b13842692679",
                            Location = 0,
                            Note = "Sed voluptates magnam odio cumque qui ex voluptates totam.",
                            Time = new DateTime(2025, 5, 21, 18, 56, 11, 850, DateTimeKind.Unspecified).AddTicks(9438)
                        },
                        new
                        {
                            Id = 14,
                            ClientId = "36b7ee83-5861-4123-9f3a-bcde88cb7495",
                            Location = 0,
                            Note = "Doloremque qui aut quia voluptatem enim.\nDelectus quasi et doloribus nihil.\nConsectetur minima consequuntur repudiandae excepturi accusamus.\nEst est sit iure beatae explicabo.",
                            Time = new DateTime(2025, 3, 11, 13, 32, 30, 493, DateTimeKind.Unspecified).AddTicks(6596)
                        },
                        new
                        {
                            Id = 15,
                            ClientId = "1e8b7700-2695-4834-adfc-ca918047bca4",
                            Location = 0,
                            Note = "Commodi praesentium animi rem quod sit sint.",
                            Time = new DateTime(2025, 6, 13, 3, 50, 34, 823, DateTimeKind.Unspecified).AddTicks(9055)
                        },
                        new
                        {
                            Id = 16,
                            ClientId = "37c95c63-3a36-4430-8546-c6cd95fb8d04",
                            Location = 0,
                            Note = "Ipsam repellendus id doloribus ad sit sit. Omnis ut cupiditate. Aut quae id voluptatibus illo nam. Quia nulla quia pariatur minus ea et expedita quia. Expedita doloribus laborum et sapiente accusamus eos.",
                            Time = new DateTime(2025, 1, 31, 15, 32, 46, 836, DateTimeKind.Unspecified).AddTicks(4523)
                        },
                        new
                        {
                            Id = 17,
                            ClientId = "57650b32-15eb-45bc-86de-9aa3c9453309",
                            Location = 0,
                            Note = "Et possimus neque et ullam odit deserunt.\nTotam repudiandae sapiente quod ex sed ab voluptatem dolorem.\nEnim aliquam explicabo enim expedita officia.\nUt deleniti debitis veniam ut qui neque nesciunt.",
                            Time = new DateTime(2025, 5, 27, 20, 3, 13, 155, DateTimeKind.Unspecified).AddTicks(849)
                        },
                        new
                        {
                            Id = 18,
                            ClientId = "a98f4a90-23d2-477d-be11-b13842692679",
                            Location = 0,
                            Note = "Illum necessitatibus unde ea voluptas. Sit est soluta quia. Cum nihil sint officiis. Commodi ut dolores pariatur sed qui voluptatem autem eaque.",
                            Time = new DateTime(2025, 6, 14, 23, 22, 49, 874, DateTimeKind.Unspecified).AddTicks(7329)
                        },
                        new
                        {
                            Id = 19,
                            ClientId = "4648bd27-14a0-41a5-93ed-c082e35751db",
                            Location = 0,
                            Note = "recusandae",
                            Time = new DateTime(2025, 4, 28, 16, 30, 19, 653, DateTimeKind.Unspecified).AddTicks(4722)
                        },
                        new
                        {
                            Id = 20,
                            ClientId = "a98f4a90-23d2-477d-be11-b13842692679",
                            Location = 0,
                            Note = "Eos blanditiis porro perferendis hic molestiae non adipisci quasi iusto. Excepturi minima voluptas vero est quo cupiditate occaecati doloribus sunt. Facere placeat qui expedita laborum iure.",
                            Time = new DateTime(2025, 5, 22, 6, 31, 25, 647, DateTimeKind.Unspecified).AddTicks(534)
                        },
                        new
                        {
                            Id = 21,
                            ClientId = "36b7ee83-5861-4123-9f3a-bcde88cb7495",
                            Location = 0,
                            Note = "Perspiciatis eum modi temporibus maiores itaque animi.",
                            Time = new DateTime(2025, 5, 12, 15, 0, 58, 805, DateTimeKind.Unspecified).AddTicks(9675)
                        },
                        new
                        {
                            Id = 22,
                            ClientId = "345e82e9-ffb8-4c2a-8fae-99577ac8e2fd",
                            Location = 0,
                            Note = "Rerum excepturi iure provident reiciendis.\nCulpa similique quia earum quis temporibus.",
                            Time = new DateTime(2025, 3, 11, 7, 58, 25, 650, DateTimeKind.Unspecified).AddTicks(5237)
                        },
                        new
                        {
                            Id = 23,
                            ClientId = "17d37933-ff23-4949-83b2-261b817d4005",
                            Location = 0,
                            Note = "Voluptas quis incidunt eveniet earum.\nQuidem temporibus aut aut odio iste at ut hic omnis.\nAliquid repellendus nemo quos aut quam reprehenderit sed facilis.\nAnimi a mollitia esse sint sed molestiae.",
                            Time = new DateTime(2025, 2, 20, 12, 44, 49, 931, DateTimeKind.Unspecified).AddTicks(7914)
                        },
                        new
                        {
                            Id = 24,
                            ClientId = "c107dc83-afe5-48f5-996f-1a20ae8beb62",
                            Location = 0,
                            Note = "et",
                            Time = new DateTime(2025, 5, 26, 0, 51, 10, 705, DateTimeKind.Unspecified).AddTicks(9410)
                        },
                        new
                        {
                            Id = 25,
                            ClientId = "345e82e9-ffb8-4c2a-8fae-99577ac8e2fd",
                            Location = 0,
                            Note = "Impedit est eum eveniet nesciunt blanditiis. Sapiente ratione recusandae ut. In et rerum praesentium et rem autem. Fugiat provident sed.",
                            Time = new DateTime(2025, 4, 15, 16, 35, 6, 727, DateTimeKind.Unspecified).AddTicks(7007)
                        },
                        new
                        {
                            Id = 26,
                            ClientId = "a98f4a90-23d2-477d-be11-b13842692679",
                            Location = 0,
                            Note = "quo",
                            Time = new DateTime(2025, 2, 24, 13, 23, 41, 520, DateTimeKind.Unspecified).AddTicks(4584)
                        },
                        new
                        {
                            Id = 27,
                            ClientId = "1e8b7700-2695-4834-adfc-ca918047bca4",
                            Location = 0,
                            Note = "Unde ut et aut dolor dolorum qui veritatis.\nId sunt dolorum aliquam quod officia eos repudiandae.\nQui laborum officia qui voluptas consequatur enim ad et.\nRepellat tempora consequatur occaecati repellendus sint harum veritatis velit soluta.",
                            Time = new DateTime(2025, 1, 13, 5, 9, 28, 775, DateTimeKind.Unspecified).AddTicks(2141)
                        },
                        new
                        {
                            Id = 28,
                            ClientId = "4648bd27-14a0-41a5-93ed-c082e35751db",
                            Location = 0,
                            Note = "amet",
                            Time = new DateTime(2025, 4, 9, 11, 33, 12, 432, DateTimeKind.Unspecified).AddTicks(3050)
                        },
                        new
                        {
                            Id = 29,
                            ClientId = "37c95c63-3a36-4430-8546-c6cd95fb8d04",
                            Location = 0,
                            Note = "Ducimus saepe ducimus nam reiciendis. Pariatur placeat consequatur enim dolores est aut. Dolorem nulla excepturi est itaque ipsa. Error dolor et excepturi accusantium. Fugit velit enim iure vel.",
                            Time = new DateTime(2025, 2, 22, 9, 50, 40, 630, DateTimeKind.Unspecified).AddTicks(4987)
                        },
                        new
                        {
                            Id = 30,
                            ClientId = "57650b32-15eb-45bc-86de-9aa3c9453309",
                            Location = 0,
                            Note = "Libero numquam sunt et est expedita ad qui magni. Est optio et. Sed esse vitae sit. Accusantium voluptas deserunt delectus quibusdam. Numquam possimus et officia rerum. Quae est nihil doloribus animi.",
                            Time = new DateTime(2025, 6, 27, 22, 15, 42, 408, DateTimeKind.Unspecified).AddTicks(9103)
                        });
                });

            modelBuilder.Entity("ClientPortal.Server.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "PersonalSite");

                    b.HasData(
                        new
                        {
                            Id = "ba8f572e-0193-40a8-8f2b-97e6e36979cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b7b655b-360e-49ae-b7e9-29af6e2bde97",
                            Email = "Clay96@email.com",
                            EmailConfirmed = false,
                            FirstName = "Clay",
                            LastName = "Robel",
                            LockoutEnabled = false,
                            NormalizedEmail = "clay96@email.com",
                            NormalizedUserName = "clay96@email.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEJGkjhhdhEJB4XQt3un6bHcBxz9mIUlLiQyXvcdGF/bVAyad+83URneylUugP5pm9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d54c293-49be-4896-b405-66efb796a2df",
                            TwoFactorEnabled = false,
                            UserName = "clay96@email.com"
                        },
                        new
                        {
                            Id = "c107dc83-afe5-48f5-996f-1a20ae8beb62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0125e370-e754-44e3-b783-d978ae866bb5",
                            Email = "Rickey48@email.com",
                            EmailConfirmed = false,
                            FirstName = "Rickey",
                            LastName = "Bashirian",
                            LockoutEnabled = false,
                            NormalizedEmail = "rickey48@email.com",
                            NormalizedUserName = "rickey48@email.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEM9I8YVZBBiNoY2qAyf+txWk3G/15eh3NnGToIiDJOtTXTBFq+SnbhAbZoMcKT8qUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b457127-612d-4023-8608-95a4b30a9280",
                            TwoFactorEnabled = false,
                            UserName = "rickey48@email.com"
                        },
                        new
                        {
                            Id = "36b7ee83-5861-4123-9f3a-bcde88cb7495",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "286daf99-153c-4306-8f6b-b566e11512a1",
                            Email = "Cary.Renner@email.com",
                            EmailConfirmed = false,
                            FirstName = "Cary",
                            LastName = "Renner",
                            LockoutEnabled = false,
                            NormalizedEmail = "cary.renner@email.com",
                            NormalizedUserName = "cary.renner@email.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDRhH14FRGhLN6tJ6EUhynVPHd8Kg/j3jUH3+MA5g3DnRxkCm/NzXhCVVxArUVHN+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b8e137c-840a-49e0-9627-dd030d6481f9",
                            TwoFactorEnabled = false,
                            UserName = "cary.renner@email.com"
                        },
                        new
                        {
                            Id = "37c95c63-3a36-4430-8546-c6cd95fb8d04",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86244e36-1658-42a4-9386-489cdef10da0",
                            Email = "Theodore79@email.com",
                            EmailConfirmed = false,
                            FirstName = "Theodore",
                            LastName = "O'Kon",
                            LockoutEnabled = false,
                            NormalizedEmail = "theodore79@email.com",
                            NormalizedUserName = "theodore79@email.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEH6ZYdngmRBepCgNhvQd1niy+DJ+g0JwYxjvfeNZ6M2yrERgDsBYRgNes3S1APsb4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a4b45689-6aab-4edb-b2d1-062d876cf6fb",
                            TwoFactorEnabled = false,
                            UserName = "theodore79@email.com"
                        },
                        new
                        {
                            Id = "a98f4a90-23d2-477d-be11-b13842692679",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26a2359a-7e21-43db-8cb5-6c0f147818d9",
                            Email = "Fred56@email.com",
                            EmailConfirmed = false,
                            FirstName = "Fred",
                            LastName = "Heller",
                            LockoutEnabled = false,
                            NormalizedEmail = "fred56@email.com",
                            NormalizedUserName = "fred56@email.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEBEQXtGscyrt7SGoeAi3Ek3x20EFLosGz2nrg1xntwVyL50s5gzjNY+8xnE5POyKPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ecf81f85-99b0-4186-9b4f-edd80bd9ae19",
                            TwoFactorEnabled = false,
                            UserName = "fred56@email.com"
                        },
                        new
                        {
                            Id = "17d37933-ff23-4949-83b2-261b817d4005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90ffd8ed-07a5-4bdd-bd51-e6f396083608",
                            Email = "Eileen.Bernhard@email.com",
                            EmailConfirmed = false,
                            FirstName = "Eileen",
                            LastName = "Bernhard",
                            LockoutEnabled = false,
                            NormalizedEmail = "eileen.bernhard@email.com",
                            NormalizedUserName = "eileen.bernhard@email.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKC1hTE8m0L+T8xTDvPsUd5IUvvZWEmOf3ga1Qb4aaMiOBIiuSk9jT1brwIteJr1IQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0701302b-b842-4760-8dac-d28c82fb9f9e",
                            TwoFactorEnabled = false,
                            UserName = "eileen.bernhard@email.com"
                        },
                        new
                        {
                            Id = "57650b32-15eb-45bc-86de-9aa3c9453309",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20211e25-a758-42cf-adea-463ca5faf2ce",
                            Email = "Levi_Trantow83@email.com",
                            EmailConfirmed = false,
                            FirstName = "Levi",
                            LastName = "Trantow",
                            LockoutEnabled = false,
                            NormalizedEmail = "levi_trantow83@email.com",
                            NormalizedUserName = "levi_trantow83@email.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEPAiy1mU7IFWt0xyIFCIAvHccPzd1+FUT0pw2On7wYhhYV/Fl9qcXbSLfjQAFKxCGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d560358-96cb-4ef1-b684-b2c5664ef2ef",
                            TwoFactorEnabled = false,
                            UserName = "levi_trantow83@email.com"
                        },
                        new
                        {
                            Id = "345e82e9-ffb8-4c2a-8fae-99577ac8e2fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c46061a-4af6-4733-b8b1-78a184367187",
                            Email = "Francis_Anderson@email.com",
                            EmailConfirmed = false,
                            FirstName = "Francis",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "francis_anderson@email.com",
                            NormalizedUserName = "francis_anderson@email.com",
                            PasswordHash = "AQAAAAIAAYagAAAAECUSoWMSvDeHdWxX0PS29T/q9iXz1tNp0/IqT/6PsmqniWlKkzaP2pSA5RuTRqqFAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7dc4d43-7262-4d70-b04c-fca7d0f986c5",
                            TwoFactorEnabled = false,
                            UserName = "francis_anderson@email.com"
                        },
                        new
                        {
                            Id = "1e8b7700-2695-4834-adfc-ca918047bca4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81c62f27-ba0b-46ed-b8ee-88473941737a",
                            Email = "Perry34@email.com",
                            EmailConfirmed = false,
                            FirstName = "Perry",
                            LastName = "Spinka",
                            LockoutEnabled = false,
                            NormalizedEmail = "perry34@email.com",
                            NormalizedUserName = "perry34@email.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDMQFm3CArX0yBHIe+z8RbO8z9U3ZwD56t2EMe9NjoJhBADfdFy1L0yUjTLn9zheHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f02e784d-5934-4c84-ade3-6fde434364a2",
                            TwoFactorEnabled = false,
                            UserName = "perry34@email.com"
                        },
                        new
                        {
                            Id = "4648bd27-14a0-41a5-93ed-c082e35751db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "832288c3-d6a2-473b-b6a1-6efc9f566662",
                            Email = "Latoya93@email.com",
                            EmailConfirmed = false,
                            FirstName = "Latoya",
                            LastName = "Bosco",
                            LockoutEnabled = false,
                            NormalizedEmail = "latoya93@email.com",
                            NormalizedUserName = "latoya93@email.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEGXsiztChWVx4RUjZE/YQT0plLX2sZr4rh/nHaYCJt20xEl/COZnB26zEE3xNBucUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae53fd5c-4eec-46a3-a9af-f72cf735c84e",
                            TwoFactorEnabled = false,
                            UserName = "latoya93@email.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "PersonalSite");

                    b.HasData(
                        new
                        {
                            Id = "bbb3e921-380e-4da8-a07d-0ab57afa7fa4",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "17a8fb86-db18-41fb-a97a-26595a5f074b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "PersonalSite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "PersonalSite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "PersonalSite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "PersonalSite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "PersonalSite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ClientPortal.Server.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ClientPortal.Server.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientPortal.Server.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ClientPortal.Server.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
